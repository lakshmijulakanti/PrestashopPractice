{
	"info": {
		"_postman_id": "f821d737-b9ab-4a93-8874-cd6863fc2fda",
		"name": "Reqres for assignment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Environment request",
			"item": [
				{
					"name": "Environment Variable Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"//Environment created"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{username}}\",\r\n    \"job\": \"{{occupation}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mainurl}}/api/users/2",
							"host": [
								"{{mainurl}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Value from one request to another request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"jsonData = JSON.parse(responseBody)\r",
									"value = jsonData.data[2].first_name\r",
									"value2 = jsonData.data[2].last_name\r",
									"console.log(value)\r",
									"console.log(value2)\r",
									"pm.environment.set(\"username\",value)\r",
									"pm.environment.set(\"occupation\",value2)\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "javascript"
								}
							}
						},
						"url": {
							"raw": "{{mainurl}}/api/users?page=2",
							"host": [
								"{{mainurl}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Requests and test cases",
			"item": [
				{
					"name": "List of users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0].id).to.eql(7);\r",
									"});\r",
									"pm.test(\"Email\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[1].email).to.eql(\"lindsay.ferguson@reqres.in\")\r",
									"});\r",
									"pm.test(\"First_name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[2].first_name).to.eql(\"Tobias\")\r",
									"});\r",
									"pm.test(\"Last_name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[3].last_name).to.eql(\"Fields\")\r",
									"});\r",
									"pm.test(\"Email of 5th person\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[4].email).to.eql(\"george.edwards@reqres.in\")\r",
									"});\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[5].avatar).to.eql(\"https://reqres.in/img/faces/12-image.jpg\")\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//My mainurl is  https://reqres.in for all the requests and i created it as a global variable"
						},
						"url": {
							"raw": "{{mainurl}}/api/users?page=2",
							"host": [
								"{{mainurl}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"pm.test(\"Name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Yosuf\");\r",
									"});\r",
									"pm.test(\"Job\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.job).to.eql(\"Sara\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Yosuf\",\r\n    \"job\": \"Sara\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mainurl}}/api/user",
							"host": [
								"{{mainurl}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"First_name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.first_name).to.eql(\"morpheus\");\r",
									"});\r",
									"pm.test(\"Last_name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.last_name).to.eql(\"zion resident\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"first_name\": \"morpheus\",\r\n    \"last_name\": \"zion resident\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mainurl}}/api/users/2",
							"host": [
								"{{mainurl}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"pm.test(\"Content-Length is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\");\r",
									"    pm.response.to.be.header(\"Content-Length\",\"0\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{mainurl}}/api/users/2",
							"host": [
								"{{mainurl}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}